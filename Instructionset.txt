24-bit Instructions (OP+16), IMM16 is stored in IRA:IRB
( 0)0000####	JMP...				ADDR=IRA:IRB, PC_LOAD
	000X	JMP to IMM16 if CARRY=X		(JNC, JC)
	001X	JMP to IMM16 if ZERO=X		(JNZ, JZ)
	010X	JMP to IMM16 if EQUAL=X		(JNE, JE)
	0110	?
	0111	JMP to IMM16			Unconditional
	10YY	ST [IMM16], R1			PC++, SRC=YY, DST=MEM[IRA:IRB]
	11YY	LD R1, [IMM16]			PC++, DST=YY, SRC=MEM[IRA:IRB]

16-bit instructions (OP+8) IMM8 is stored in IRA
( 1)0001SSYY	ALU IMM8			PC++, ALUOP=SS, SRC=IRA, DST=YY, BXOR=0, Cin=0
( 2)0010####	ST/LD...
	000Y	ST [R1:R2], IMM8		PC++, SRC=IRA, DST=Y (0=[A:B], 1=[C:D])
	001#	?
	01YY	LD R1, IMM8			PC++, DATA=IRA, DST=YY
	10##	?
	11##	?

8-bit instructions (No extra arguments)
( 3)0011####	ST/LD [R1:R2]...
	00RR	ST [R1:R2]			PC++, SRC+ADDR=RR, DST=MEM[R1:R2]
	01RR	LD [R1:R2]			PC++, DST+ADDR=RR, SRC=MEM[R1:R2]
	1###	?
( 4)0100####	?
( 5)0101####	?
( 6)0110####	?
( 7)0111XXYY	CMP R1, R2			PC++, SRC=XX, DST=YY, LOAD_CZEFLAG
		CMP SRC=DST is unproductive (always true)
( 8)1000####	JMP...				ADDR=R1:R2, PC_LOAD
	000X	JMP to A:B if CARRY=X		(JNC, JC)
	001X	JMP to A:B if ZERO=X		(JNZ, JZ)
	010X	JMP to A:B if EQUAL=X		(JNE, JE)
	0110	?
	0111	JMP to A:B			Unconditional
	100X	JMP to C:D if CARRY=X		(JNC, JC)
	101X	JMP to C:D if ZERO=X		(JNZ, JZ)
	110X	JMP to C:D if EQUAL=X		(JNE, JE)
	1110	?
	1111	JMP to C:D			Unconditional
( 9)1001XXYY	ALU ADC				PC++, ALUOP=00, SRC=XX, DST=YY, BXOR=0, Cin=CFLAG, LOAD_CZEFLAGS
		ADC SRC=DST is equivalent to ROL R1, 1
(10)1010XXYY	ALU SUB				PC++, ALUOP=00, SRC=XX, DST=YY, BXOR=1, Cin=0, LOAD_CZEFLAGS
(11)1011XXYY	ALU SBC				PC++, ALUOP=00, SRC=XX, DST=YY, BXOR=1, Cin=CFLAG, LOAD_CZEFLAGS
		SUB/SBC SRC=DST is unproductive (use XOR)
(12)11SSXXYY	ALU OP				PC++, ALUOP=SS, SRC=XX, DST=YY, BXOR=0, Cin=0, LOAD_CZEFLAGS
		SS --> 00=ADD, 01=XOR, 10=AND, 11=OR
		ADD SRC=DST is equivalent to SHL R1, 1
(13)		XOR SRC=DST will set the register to zero
(14)		AND SRC=DST is unproductive
(15)		OR  SRC=DST is unproductive
	1111	NOP				PC++

JMP instructions (0000 & 1000) will not increase PC unless condition is false.

Registers:
General purpose (8 bit): A, B, C, D
Instruction registers (8 bit): IROP, IRA, IRB

Missing instructions: CLRC (clear carry), SETC (set carry), INC, DEC, SWAP?

for ops like SWAP, it may be possible to have registers storing which register is A, which is B, etc
and things like SWAP simply loads new values into those meta-registers
                 ______        ______
                |      |      |      |
Clock:          |      |______|      |______
                ^      ^\___
                 \__        Trigger register/memory LOAD
                    Set up busses


SRC XX / DST YY: 00 = A, 01 = B, 10 = C, 11 = D

Possible legal moves...
XXYY	SRC	DST
0000	A	-		maybe A:B -> C:D ?
0001	A	B
0010	A	C
0011	A	D
0100	B	A
0101	B	-		maybe SWAP A<-->B ?
0110	B	C
0111	B	D
1000	C	A
1001	C	B
1010	C	-		maybe C:D -> A:B ?
1011	C	D
1100	D	A
1101	D	B
1110	D	C
1111	D	-		maybe SWAP C<-->D ?

RR		LD(Load)/ST(Store) SRC/DST and ADDR
		SRC/DST		ADDR
00		A		[C:D]
01		B		[C:D]
10		C		[A:B]
11		D		[A:B]

A:B or C:D can be inferred (if reg=A/B then you probably store the address in C:D, ...)
